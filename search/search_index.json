{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introducing FlutterVision Design to code Tool, for Flutter Here is a step-by-step guide on how to use FlutterVision more smoothly and easily. And for this first phase of the tool, the Beta Version witch may contain a few bugs. Please let us know whatever you think that can be improved. To use the FlutterVision tool you need an account. To create one, click here . This workflow includes 4 basic steps: Choose and upload your input: You can use FlutterVision with two kinds of inputs: (1) Figma project or (2) Screenshots. Using Figma is the best way to get a better application, because Figma provides a lot of important information to build your app. Adjustments and navigation : After uploading your input in FlutterVision, you should check the AI results and, if necessary, make the adjustments. In this phase you can set the correct screen order. Download : This is the easiest step, you just need to finish the project and choose the framework you are working with. For now, FlutterVision is compatible with Flutter , which generates code that you can run on VSCode , for i,e. Run : The last step is done outside FlutterVision, where you will open your project, make any adjustments and compile it to run on your board. If you prefer a more illustrative tutorial in video format, click here .","title":"Introducing FlutterVision"},{"location":"#introducing-fluttervision","text":"","title":"Introducing FlutterVision"},{"location":"#design-to-code-tool-for-flutter","text":"Here is a step-by-step guide on how to use FlutterVision more smoothly and easily. And for this first phase of the tool, the Beta Version witch may contain a few bugs. Please let us know whatever you think that can be improved. To use the FlutterVision tool you need an account. To create one, click here . This workflow includes 4 basic steps: Choose and upload your input: You can use FlutterVision with two kinds of inputs: (1) Figma project or (2) Screenshots. Using Figma is the best way to get a better application, because Figma provides a lot of important information to build your app. Adjustments and navigation : After uploading your input in FlutterVision, you should check the AI results and, if necessary, make the adjustments. In this phase you can set the correct screen order. Download : This is the easiest step, you just need to finish the project and choose the framework you are working with. For now, FlutterVision is compatible with Flutter , which generates code that you can run on VSCode , for i,e. Run : The last step is done outside FlutterVision, where you will open your project, make any adjustments and compile it to run on your board. If you prefer a more illustrative tutorial in video format, click here .","title":"Design to code Tool, for Flutter"},{"location":"pre-setting/","text":"Pre-setting Accessing FlutterVision and sending files This is the first screen of FlutterVision. If you don't have an account yet, you can quickly create one. Main steps 1) How to create an account? There are two options: (1) clicking in \"Create an account\" and filling the form and (2) clicking in \"Login with Google\" and integrating FlutterVision with your Google account. 2) Login After the Login, you'll be redirected to the user page. 3) Forgot Password Request a new password, that you'll receive by e-mail. 4) Create Project Create a new project redirecting you to the upload page. Set the Project name. This name will be used in the download file name. IMPORTANT: NAMES CAN ONLY CONTAIN A-Z, a-z, 0-9 and underscore. Otherwise, the application cannot be compiled properly. Even the path (e.g. C:\\Users\\steve\\Documents\\project_name) must comply with these rules.\"","title":"Pre-setting"},{"location":"pre-setting/#pre-setting","text":"","title":"Pre-setting"},{"location":"pre-setting/#accessing-fluttervision-and-sending-files","text":"This is the first screen of FlutterVision. If you don't have an account yet, you can quickly create one.","title":"Accessing FlutterVision and sending files"},{"location":"pre-setting/#main-steps","text":"","title":"Main steps"},{"location":"pre-setting/#1-how-to-create-an-account","text":"There are two options: (1) clicking in \"Create an account\" and filling the form and (2) clicking in \"Login with Google\" and integrating FlutterVision with your Google account.","title":"1) How to create an account?"},{"location":"pre-setting/#2-login","text":"After the Login, you'll be redirected to the user page.","title":"2) Login"},{"location":"pre-setting/#3-forgot-password","text":"Request a new password, that you'll receive by e-mail.","title":"3) Forgot Password"},{"location":"pre-setting/#4-create-project","text":"Create a new project redirecting you to the upload page. Set the Project name. This name will be used in the download file name. IMPORTANT: NAMES CAN ONLY CONTAIN A-Z, a-z, 0-9 and underscore. Otherwise, the application cannot be compiled properly. Even the path (e.g. C:\\Users\\steve\\Documents\\project_name) must comply with these rules.\"","title":"4) Create Project"},{"location":"exporting/generating-exportable-file/","text":"Generating the exportable file Exporting your UI prototype File downloaded! We\u2019d appreciate it if you can share with us how was your experience using FlutterVision web application.","title":"Generating the Exportable File"},{"location":"exporting/generating-exportable-file/#generating-the-exportable-file","text":"","title":"Generating the exportable file"},{"location":"exporting/generating-exportable-file/#exporting-your-ui-prototype","text":"File downloaded! We\u2019d appreciate it if you can share with us how was your experience using FlutterVision web application.","title":"Exporting your UI prototype"},{"location":"exporting/running-ui-code/","text":"Generating the UI code - Flutter How to use your UI code on Flutter Extract all files from the .zip file generated by FlutterVision. Open the Flutter file on the folder on terminal command or on VSCode. Download the Flutter dependency using \"flutter pub get\" Run using the command \"flutter run\" VOIL\u00c0! Your project in Flutter is created. Running on android Extract all files from the .zip file generated by FlutterVision. Open the Flutter file on the folder on terminal command or on VSCode. Download the Flutter dependency using the command \"flutter pub get\". Execute the command \"flutter create -t app \\ \". Copy the lib folder and pubspec.Yaml and replace on the new folder that had been created. In the new folder, open the command terminal and run the command \"flutter pub get\" again. After run the command \"flutter build apk\" and the flutter will generate the application in the folder flutter-apk, ready to install and run. To found the flutter-apk folder, you had to do the following path: \\build\\app\\outputs\\flutter-apk","title":"Running the UI code"},{"location":"exporting/running-ui-code/#generating-the-ui-code-flutter","text":"","title":"Generating the UI code - Flutter"},{"location":"exporting/running-ui-code/#how-to-use-your-ui-code-on-flutter","text":"Extract all files from the .zip file generated by FlutterVision. Open the Flutter file on the folder on terminal command or on VSCode. Download the Flutter dependency using \"flutter pub get\" Run using the command \"flutter run\" VOIL\u00c0! Your project in Flutter is created.","title":"How to use your UI code on Flutter"},{"location":"exporting/running-ui-code/#running-on-android","text":"Extract all files from the .zip file generated by FlutterVision. Open the Flutter file on the folder on terminal command or on VSCode. Download the Flutter dependency using the command \"flutter pub get\". Execute the command \"flutter create -t app \\ \". Copy the lib folder and pubspec.Yaml and replace on the new folder that had been created. In the new folder, open the command terminal and run the command \"flutter pub get\" again. After run the command \"flutter build apk\" and the flutter will generate the application in the folder flutter-apk, ready to install and run. To found the flutter-apk folder, you had to do the following path: \\build\\app\\outputs\\flutter-apk","title":"Running on android"},{"location":"figma/good-practices-figma/","text":"Good practices on Figma to get a better result How to prepare your Figma Project Rename components Choosing the best names to components (e.g. Frames, Buttons, etc.) can help you to get a better organization in your project. FlutterVision will import all names, in this way it will be easier to identify and make changes in those components. You can also use the component type in the name, like \"Login_Button\", \"Services_Frame\" and \"Email_Edit\". Use Frames and Groups Boxes into boxes: this is how we build applications. So, when preparing your Figma project, it's important to create frames (this one is the best way) and groups to get a great \"application tree\". Status bar and home indicator Since it's not necessary to code the status bar and the home indicator, this is not necessary on the Figma project. If it does, you can delete it before going to FlutterVision. Group vectors If you are working with a lot of vectors that compose the same image, remember to group it. In this way, FlutterVision will identify it as one component. Alignments Figma has a lot of options in terms of Alignments. If you are building a mobile application, it's important to review each frame's alignments, from parents to children. Access the \"Auto Layout\" properties to analyze the alignments, those will be imported as Stack Layout on FlutterVision. When there isn't Auto Layout, our tool will understand it as Relative Layout. You can check the page behavior by resizing it. Figma will automatically update the component's sizes to adapt them to the screen. Constraints and Resizing Constraints and Resizing are also important when we are considering the user experience. So, it's important to check the selected options to ensure that the frames are having the expected behavior. Choose between Fill, Fixed , and Hug Contents. You can check the page behavior by resizing it. Figma will automatically update the component's sizes to adapt them to the screen. Navigation You can use the navigation flow from Figma to import it to FlutterVision. In this way, navigation between screens will be already setted up. Delete unnecessary components When we are creating Figma projects, it is common to add some components, like frames, that we don't need. So, remember to delete those components. If you see a lot of strange boxes on Flutter Vision, there is a huge chance there will be an unnecessary components problem. Also, avoid using Invisible components. Color Fill properties Check each component color fill property. Remember that screens have their own color and layers can have different ones. You can also use the transparency option. Avoid components out of screens Please, do not use components or images which is using spaces outside of screens. Example: Let only one page on the Figma project Avoid having more than one page on the Figma project. You may have only the page with the screens. At this same page, you can set up the navigation between the screens (on Figma this feature is called as Prototype). Remeber, one Figma page. Not screens. Avoid lines with height = 0 The line should have at least 1 px. If you use a line with height = 0, tha AI will not be able to import the project.","title":"Good practices on Figma to get a better result"},{"location":"figma/good-practices-figma/#good-practices-on-figma-to-get-a-better-result","text":"","title":"Good practices on Figma to get a better result"},{"location":"figma/good-practices-figma/#how-to-prepare-your-figma-project","text":"","title":"How to prepare your Figma Project&#x20;"},{"location":"figma/good-practices-figma/#rename-components","text":"Choosing the best names to components (e.g. Frames, Buttons, etc.) can help you to get a better organization in your project. FlutterVision will import all names, in this way it will be easier to identify and make changes in those components. You can also use the component type in the name, like \"Login_Button\", \"Services_Frame\" and \"Email_Edit\".","title":"Rename components"},{"location":"figma/good-practices-figma/#use-frames-and-groups","text":"Boxes into boxes: this is how we build applications. So, when preparing your Figma project, it's important to create frames (this one is the best way) and groups to get a great \"application tree\".","title":"Use Frames and Groups"},{"location":"figma/good-practices-figma/#status-bar-and-home-indicator","text":"Since it's not necessary to code the status bar and the home indicator, this is not necessary on the Figma project. If it does, you can delete it before going to FlutterVision.","title":"Status bar and home indicator"},{"location":"figma/good-practices-figma/#group-vectors","text":"If you are working with a lot of vectors that compose the same image, remember to group it. In this way, FlutterVision will identify it as one component.","title":"Group vectors"},{"location":"figma/good-practices-figma/#alignments","text":"Figma has a lot of options in terms of Alignments. If you are building a mobile application, it's important to review each frame's alignments, from parents to children. Access the \"Auto Layout\" properties to analyze the alignments, those will be imported as Stack Layout on FlutterVision. When there isn't Auto Layout, our tool will understand it as Relative Layout. You can check the page behavior by resizing it. Figma will automatically update the component's sizes to adapt them to the screen.","title":"Alignments"},{"location":"figma/good-practices-figma/#constraints-and-resizing","text":"Constraints and Resizing are also important when we are considering the user experience. So, it's important to check the selected options to ensure that the frames are having the expected behavior. Choose between Fill, Fixed , and Hug Contents. You can check the page behavior by resizing it. Figma will automatically update the component's sizes to adapt them to the screen.","title":"Constraints and Resizing"},{"location":"figma/good-practices-figma/#navigation","text":"You can use the navigation flow from Figma to import it to FlutterVision. In this way, navigation between screens will be already setted up.","title":"Navigation"},{"location":"figma/good-practices-figma/#delete-unnecessary-components","text":"When we are creating Figma projects, it is common to add some components, like frames, that we don't need. So, remember to delete those components. If you see a lot of strange boxes on Flutter Vision, there is a huge chance there will be an unnecessary components problem. Also, avoid using Invisible components.","title":"Delete unnecessary components"},{"location":"figma/good-practices-figma/#color-fill-properties","text":"Check each component color fill property. Remember that screens have their own color and layers can have different ones. You can also use the transparency option.","title":"Color Fill properties"},{"location":"figma/good-practices-figma/#avoid-components-out-of-screens","text":"Please, do not use components or images which is using spaces outside of screens. Example:","title":"Avoid components out of screens"},{"location":"figma/good-practices-figma/#let-only-one-page-on-the-figma-project","text":"Avoid having more than one page on the Figma project. You may have only the page with the screens. At this same page, you can set up the navigation between the screens (on Figma this feature is called as Prototype). Remeber, one Figma page. Not screens.","title":"Let only one page on the Figma project"},{"location":"figma/good-practices-figma/#avoid-lines-with-height-0","text":"The line should have at least 1 px. If you use a line with height = 0, tha AI will not be able to import the project.","title":"Avoid lines with height = 0"},{"location":"figma/how-it-works/","text":"How it works Convert Figma into a Flutter project To use FlutterVision with Figma, you need to follow these steps: Organize your Figma project (check our tips on the next page); Create a new project on FlutterVision and choose Figma as input; Fill the credentials with: (1) Figma Token - it's unique for each Figma account - and (2) Project Key - you can get it on the project URL; After the AI work, please check each page and component. If necessary, you can make some adjustments; You can export and run your Flutter project. Check this quickly tutorial to understand more about it: Need a sample to test? If you don't have a Figma project to test with FlutterVision, we indicates to use this one: https://www.figma.com/file/7z7ZOf9xXO5rOEupIdM2ql/Travel-Mobile-App-Design-(Community)?node-id=0%3A1 Credits: https://www.figma.com/@uxdworld","title":"How it works"},{"location":"figma/how-it-works/#how-it-works","text":"","title":"How it works"},{"location":"figma/how-it-works/#convert-figma-into-a-flutter-project","text":"To use FlutterVision with Figma, you need to follow these steps: Organize your Figma project (check our tips on the next page); Create a new project on FlutterVision and choose Figma as input; Fill the credentials with: (1) Figma Token - it's unique for each Figma account - and (2) Project Key - you can get it on the project URL; After the AI work, please check each page and component. If necessary, you can make some adjustments; You can export and run your Flutter project. Check this quickly tutorial to understand more about it:","title":"Convert Figma into a Flutter project"},{"location":"figma/how-it-works/#need-a-sample-to-test","text":"If you don't have a Figma project to test with FlutterVision, we indicates to use this one: https://www.figma.com/file/7z7ZOf9xXO5rOEupIdM2ql/Travel-Mobile-App-Design-(Community)?node-id=0%3A1 Credits: https://www.figma.com/@uxdworld","title":"Need a sample to test?"},{"location":"figma/what-we-support/","text":"What we support There are some Figma features that FlutterVision supports and some of them are still being implemented. Check out we already support on Alignments, Resizing and Constraints from Figma: Auto Layout Vertical direction Horizontal direction Spacing between items - Fixed Padding around items Alignments Left Horizontal Center Right Top Vertical Center Bottom Resizing Fixed with Hug contents Horizontal Vertical Constraints Horizontal Fixed Left Right Left & Right Center Vertical Fixed Top Bottom Top & Bottom Center We are working hard to support all features on Figma considered important to generate a Flutter application FlutterVision doesn't support Figma custom components yet ( https://www.youtube.com/watch?v=k74IrUNaJVk )","title":"What we support"},{"location":"figma/what-we-support/#what-we-support","text":"There are some Figma features that FlutterVision supports and some of them are still being implemented. Check out we already support on Alignments, Resizing and Constraints from Figma: Auto Layout Vertical direction Horizontal direction Spacing between items - Fixed Padding around items Alignments Left Horizontal Center Right Top Vertical Center Bottom Resizing Fixed with Hug contents Horizontal Vertical Constraints Horizontal Fixed Left Right Left & Right Center Vertical Fixed Top Bottom Top & Bottom Center We are working hard to support all features on Figma considered important to generate a Flutter application FlutterVision doesn't support Figma custom components yet ( https://www.youtube.com/watch?v=k74IrUNaJVk )","title":"What we support"},{"location":"product-changelog/","text":"\ud83e\udd73 Product Changelog Product releases June 16, 2022 Support changing components types \u263a\ufe0f Improved import from Figma \ud83d\udeeb Improved export to Flutter \ud83d\udeec Improve grouping components functionality \ud83d\udc65 Support color opacity for the background \ud83e\ude82 Support better the text components \ud83e\udea1 Support more properties on import \ud83e\udd61 Support showShadowBehindNode property Support TextAlignment property Bug fixes \ud83d\udc7e May 18, 2022 Import correctly background colors from Figma projects \ud83d\udd8c The Privacy Policy was updated to include Figma permissions \u2139\ufe0f Import correctly images from Figma project \ud83d\udcf8 Exclude hidden components from Figma during the import phase \ud83d\udc41 Support shadows on components \ud83d\udd76 Error on login page was fixed \ud83d\udeaa RadioButton and DropDownList now are exported correctly \ud83d\udda8 Support row and column on relative layouts \ud83d\ude43 A lot of bug fixes \ud83d\udc7e\ud83d\udc7e April 29, 2022 Fix the location of containers to be close to the Figma file \ud83d\udccd Support and return more explained error messages \u274c Error messages are not anymore blocking \ud83d\udea7 Support better RadioButton implementation \ud83e\uddf6 Support resizing property \"Hug Contents\" \ud83e\udec2 Support better export results \ud83d\udd76 Support export when using screenshots \ud83c\udf3b A lot of bug fixes \ud83d\udc7e\ud83d\udc7e April 22, 2022 Allow undo operations \ud83c\udfc3 Support text alignment \ud83d\udc49 Support more border properties: Corner Radius, Stroke Weight and Stroke Align \ud83d\uddbc Support Portuguese language \ud83c\udde7\ud83c\uddf7 Figma import just with the Project URL \u26a1\ufe0f Return more detailed error messages \u26a0\ufe0f A lot of bug fixes \ud83d\udc7e\ud83d\udc7e April 15, 2022 Align text correctly following Figma info \ud83d\udef8 Implement \"Rounded Borders\" and \"Stroke\" properties for components in the User Interface \ud83d\uddbc\ufe0f A lot of bug fixes \ud83d\udc7e\ud83d\udc7e April 8, 2022 Support more responsiveness features (relative layout) \ud83e\udd29 Retrieve Font Weight info from Figma \ud83d\udcdd Support rounded borders from Figma \ud83c\udf88 Support grouping radiobuttons \ud83d\udc65 Allow resizing the components \ud83d\udd1d A lot of bug fixes \ud83d\udc7e\ud83d\udc7e Improvements in the performance of the AI \ud83e\udde0 March 22, 2022 A lot of bug fixes \ud83d\udc7e\ud83d\udc7e Support to variants and custom components on Figma \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa8 Improvements in the exported Flutter code \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbb Improvements in the performance of the AI \ud83e\uddbe\ud83e\udd16 3 new communication channels to contact us (Discord, chat and GitHub) \ud83d\udde3\ud83e\udde0","title":"Product Changelog"},{"location":"product-changelog/#product-changelog","text":"","title":"\ud83e\udd73 Product Changelog"},{"location":"product-changelog/#product-releases","text":"","title":"Product releases"},{"location":"product-changelog/#june-16-2022","text":"Support changing components types \u263a\ufe0f Improved import from Figma \ud83d\udeeb Improved export to Flutter \ud83d\udeec Improve grouping components functionality \ud83d\udc65 Support color opacity for the background \ud83e\ude82 Support better the text components \ud83e\udea1 Support more properties on import \ud83e\udd61 Support showShadowBehindNode property Support TextAlignment property Bug fixes \ud83d\udc7e","title":"June 16, 2022"},{"location":"product-changelog/#may-18-2022","text":"Import correctly background colors from Figma projects \ud83d\udd8c The Privacy Policy was updated to include Figma permissions \u2139\ufe0f Import correctly images from Figma project \ud83d\udcf8 Exclude hidden components from Figma during the import phase \ud83d\udc41 Support shadows on components \ud83d\udd76 Error on login page was fixed \ud83d\udeaa RadioButton and DropDownList now are exported correctly \ud83d\udda8 Support row and column on relative layouts \ud83d\ude43 A lot of bug fixes \ud83d\udc7e\ud83d\udc7e","title":"May 18, 2022"},{"location":"product-changelog/#april-29-2022","text":"Fix the location of containers to be close to the Figma file \ud83d\udccd Support and return more explained error messages \u274c Error messages are not anymore blocking \ud83d\udea7 Support better RadioButton implementation \ud83e\uddf6 Support resizing property \"Hug Contents\" \ud83e\udec2 Support better export results \ud83d\udd76 Support export when using screenshots \ud83c\udf3b A lot of bug fixes \ud83d\udc7e\ud83d\udc7e","title":"April 29, 2022"},{"location":"product-changelog/#april-22-2022","text":"Allow undo operations \ud83c\udfc3 Support text alignment \ud83d\udc49 Support more border properties: Corner Radius, Stroke Weight and Stroke Align \ud83d\uddbc Support Portuguese language \ud83c\udde7\ud83c\uddf7 Figma import just with the Project URL \u26a1\ufe0f Return more detailed error messages \u26a0\ufe0f A lot of bug fixes \ud83d\udc7e\ud83d\udc7e","title":"April  22, 2022"},{"location":"product-changelog/#april-15-2022","text":"Align text correctly following Figma info \ud83d\udef8 Implement \"Rounded Borders\" and \"Stroke\" properties for components in the User Interface \ud83d\uddbc\ufe0f A lot of bug fixes \ud83d\udc7e\ud83d\udc7e","title":"April 15, 2022"},{"location":"product-changelog/#april-8-2022","text":"Support more responsiveness features (relative layout) \ud83e\udd29 Retrieve Font Weight info from Figma \ud83d\udcdd Support rounded borders from Figma \ud83c\udf88 Support grouping radiobuttons \ud83d\udc65 Allow resizing the components \ud83d\udd1d A lot of bug fixes \ud83d\udc7e\ud83d\udc7e Improvements in the performance of the AI \ud83e\udde0","title":"April 8, 2022"},{"location":"product-changelog/#march-22-2022","text":"A lot of bug fixes \ud83d\udc7e\ud83d\udc7e Support to variants and custom components on Figma \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa8 Improvements in the exported Flutter code \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbb Improvements in the performance of the AI \ud83e\uddbe\ud83e\udd16 3 new communication channels to contact us (Discord, chat and GitHub) \ud83d\udde3\ud83e\udde0","title":"March 22, 2022"}]}